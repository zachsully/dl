{- BEHAVIOR : TypeError -}
index Zero
index Succ n

data List a
  { Nil  : List a
  | Cons : a -> List a -> List a }

codata With a b
  { Fst : With a b -> a
  ; Snd : With a b -> b }

codata Stack n
  { Push : Succ n = m => Stack n -> Int -> Stack m
  ; Pop  : n = Succ m => Stack n -> With Int (Stack m) }

let mkStack = fix s in
  { # (Cons x xs) ->
    { Push # y    -> s (Cons y (Cons x xs))
    ; Fst [Pop #] -> x
    ; Snd [Pop #] -> s xs } } in

let empty = { Push # x -> mkStack (Cons x Nil) } : Stack Zero in

let stackTwo = cocase [Push [[Push #] 1] 2] empty in

cocase [Pop [Snd [Pop [Snd [Pop #]]]]] stackTwo
